CCS PCM C Compiler, Version 4.104, 5967               19-fev-21 16:05

               Filename: E:\ArquivosProjetos\PIC\Headlight flash to control electronic gates\main.lst

               ROM used: 202 words (10%)
                         Largest free fragment is 1846
               RAM used: 15 (7%) at main() level
                         16 (7%) worst case
               Stack:    2 worst case (0 in main + 2 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   09E
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.4
001B:  GOTO   01E
001C:  BTFSC  0B.1
001D:  GOTO   04A
001E:  MOVLW  8C
001F:  MOVWF  04
0020:  BTFSS  00.0
0021:  GOTO   024
0022:  BTFSC  0C.0
0023:  GOTO   058
0024:  MOVF   22,W
0025:  MOVWF  04
0026:  MOVF   23,W
0027:  MOVWF  77
0028:  MOVF   24,W
0029:  MOVWF  78
002A:  MOVF   25,W
002B:  MOVWF  79
002C:  MOVF   26,W
002D:  MOVWF  7A
002E:  MOVF   27,W
002F:  MOVWF  0A
0030:  SWAPF  21,W
0031:  MOVWF  03
0032:  SWAPF  7F,F
0033:  SWAPF  7F,W
0034:  RETFIE
.................... #include <16f628a.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
.................... #use delay(clock = 4000000) 
0035:  MOVLW  2A
0036:  MOVWF  04
0037:  BCF    03.7
0038:  MOVF   00,W
0039:  BTFSC  03.2
003A:  GOTO   049
003B:  MOVLW  01
003C:  MOVWF  78
003D:  CLRF   77
003E:  DECFSZ 77,F
003F:  GOTO   03E
0040:  DECFSZ 78,F
0041:  GOTO   03D
0042:  MOVLW  4A
0043:  MOVWF  77
0044:  DECFSZ 77,F
0045:  GOTO   044
0046:  GOTO   047
0047:  DECFSZ 00,F
0048:  GOTO   03B
0049:  RETURN
.................... #fuses INTRC_IO, NOMCLR, WDT 
....................  
.................... volatile int8 flash = 0, overflow = 0; 
....................  
.................... #INT_EXT 
.................... void int_rb0_isr(void) 
.................... { 
....................   delay_ms(10); // Debounce 
004A:  MOVLW  0A
004B:  MOVWF  2A
004C:  CALL   035
....................    
....................   clear_interrupt(int_ext); 
004D:  BCF    0B.1
....................  
....................   set_timer1(0); 
004E:  CLRF   0F
004F:  CLRF   0E
....................   setup_timer_1(T1_INTERNAL | T1_DIV_BY_1); // 4 MHz clock, 16 bit timer 
0050:  MOVLW  85
0051:  MOVWF  10
....................   overflow = 0;                             // overflow occurs each 65.5 ms (4/fosc * 2^16-1) 
0052:  CLRF   29
....................   flash++; 
0053:  INCF   28,F
....................    
....................   enable_interrupts(INT_EXT); 
0054:  BSF    0B.4
.................... } 
....................  
0055:  BCF    0B.1
0056:  BCF    0A.3
0057:  GOTO   024
.................... #INT_TIMER1 
.................... void int_t1_isr(void) 
.................... { 
....................   overflow++; 
0058:  INCF   29,F
....................  
....................   clear_interrupt(int_timer1); 
0059:  BCF    0C.0
....................   disable_interrupts(INT_TIMER1); 
005A:  BSF    03.5
005B:  BCF    0C.0
....................    
....................   if (input(PIN_B0) && overflow == 15) // If input high for 1 sec 
005C:  BSF    06.0
005D:  BCF    03.5
005E:  BTFSS  06.0
005F:  GOTO   068
0060:  MOVF   29,W
0061:  SUBLW  0F
0062:  BTFSS  03.2
0063:  GOTO   068
....................   { 
....................     setup_timer_1(T1_DISABLED); 
0064:  CLRF   10
....................     overflow = 0; 
0065:  CLRF   29
....................     flash = 0; 
0066:  CLRF   28
....................   } 
....................  
....................   else if (overflow == 30) // 30 * 65.5 ms -> about 2 seconds 
0067:  GOTO   096
0068:  MOVF   29,W
0069:  SUBLW  1E
006A:  BTFSS  03.2
006B:  GOTO   096
....................   { 
....................     setup_timer_1(T1_DISABLED); 
006C:  CLRF   10
....................     overflow = 0; 
006D:  CLRF   29
....................  
....................     if (flash == 1) 
006E:  DECFSZ 28,W
006F:  GOTO   075
....................       output_high(PIN_A0); 
0070:  BSF    03.5
0071:  BCF    05.0
0072:  BCF    03.5
0073:  BSF    05.0
....................  
....................     else if (flash == 2) 
0074:  GOTO   08A
0075:  MOVF   28,W
0076:  SUBLW  02
0077:  BTFSS  03.2
0078:  GOTO   07E
....................       output_high(PIN_A1); 
0079:  BSF    03.5
007A:  BCF    05.1
007B:  BCF    03.5
007C:  BSF    05.1
....................  
....................     else if (flash == 3) 
007D:  GOTO   08A
007E:  MOVF   28,W
007F:  SUBLW  03
0080:  BTFSS  03.2
0081:  GOTO   08A
....................     { 
....................       output_high(PIN_A0); 
0082:  BSF    03.5
0083:  BCF    05.0
0084:  BCF    03.5
0085:  BSF    05.0
....................       output_high(PIN_A1); 
0086:  BSF    03.5
0087:  BCF    05.1
0088:  BCF    03.5
0089:  BSF    05.1
....................     } 
....................  
....................     delay_ms(200); 
008A:  MOVLW  C8
008B:  MOVWF  2A
008C:  CALL   035
....................  
....................     output_low(PIN_A0); 
008D:  BSF    03.5
008E:  BCF    05.0
008F:  BCF    03.5
0090:  BCF    05.0
....................     output_low(PIN_A1); 
0091:  BSF    03.5
0092:  BCF    05.1
0093:  BCF    03.5
0094:  BCF    05.1
....................  
....................     flash = 0; 
0095:  CLRF   28
....................   } 
....................  
....................   enable_interrupts(INT_TIMER1); 
0096:  BSF    03.5
0097:  BSF    0C.0
....................   set_timer1(0); 
0098:  BCF    03.5
0099:  CLRF   0F
009A:  CLRF   0E
.................... } 
....................  
009B:  BCF    0C.0
009C:  BCF    0A.3
009D:  GOTO   024
.................... void main(void) 
.................... { 
009E:  CLRF   04
009F:  BCF    03.7
00A0:  MOVLW  1F
00A1:  ANDWF  03,F
00A2:  CLRF   28
00A3:  CLRF   29
00A4:  MOVLW  07
00A5:  MOVWF  1F
....................   setup_wdt(WDT_2304MS); 
00A6:  MOVLW  0F
00A7:  MOVWF  77
00A8:  CLRF   01
00A9:  MOVLW  81
00AA:  MOVWF  04
00AB:  BCF    03.7
00AC:  MOVF   00,W
00AD:  ANDLW  F0
00AE:  IORLW  07
00AF:  MOVWF  00
00B0:  CLRWDT
00B1:  MOVF   00,W
00B2:  ANDLW  F7
00B3:  BTFSC  77.3
00B4:  ANDLW  F0
00B5:  IORWF  77,W
00B6:  MOVWF  00
....................   output_low(PIN_A0); 
00B7:  BSF    03.5
00B8:  BCF    05.0
00B9:  BCF    03.5
00BA:  BCF    05.0
....................   output_low(PIN_A1); 
00BB:  BSF    03.5
00BC:  BCF    05.1
00BD:  BCF    03.5
00BE:  BCF    05.1
....................  
....................   restart_wdt(); 
00BF:  CLRWDT
....................   enable_interrupts(INT_EXT); 
00C0:  BSF    0B.4
....................   ext_int_edge(L_TO_H); // Interrupt on rising edge 
00C1:  BSF    03.5
00C2:  BSF    01.6
....................   enable_interrupts(INT_TIMER1); 
00C3:  BSF    0C.0
....................   enable_interrupts(GLOBAL); 
00C4:  MOVLW  C0
00C5:  BCF    03.5
00C6:  IORWF  0B,F
....................  
....................   while (true) 
....................   { 
....................     restart_wdt(); 
00C7:  CLRWDT
....................   } 
00C8:  GOTO   0C7
.................... } 
....................  
00C9:  SLEEP

Configuration Fuses:
   Word  1: 3F54   WDT PUT NOPROTECT BROWNOUT NOMCLR NOLVP INTRC_IO NOCPD
